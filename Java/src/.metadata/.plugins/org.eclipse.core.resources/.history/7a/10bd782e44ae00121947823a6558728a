package edu.ucsf.ranges;

import java.util.ArrayList;

import edu.ucsf.base.*;

/**
 * This code allows for evaluation and validation of diversity estimators based on range sizes and samples from a select set of locations.
 * @author jladau
 */
public class Main {

	public static void main(String rgsArgs[]){
		
		//arg1 = arguments object
		//smr1 = SmoothedRanges object
		//bds1 = sampling bounds
		//bds2 = sampling bounds (for estimating number of shared species)
		//div1 = diversity estimator
		//lstOut = output
		//dTolerance = tolerance for root finding
		
		ArrayList<String> lstOut;
		Arguments arg1;
		SmoothedGeographicRanges smr1;
		GeographicBounds bds1; GeographicBounds bds2;
		DiversityEstimator div1;
		double dTolerance;
		
		//loading arguments
		arg1 = new Arguments(rgsArgs);
		
		//loading smoothed ranges object
		smr1 = new SmoothedGeographicRanges(arg1);
		
		//loading geographic bounds
		bds1 = new GeographicBounds(arg1.getValueDouble("dLatMin"),arg1.getValueDouble("dLatMax"),arg1.getValueDouble("dLonMin"),arg1.getValueDouble("dLonMax"));
		bds2 = new GeographicBounds(arg1.getValueDouble("dLatMin2"),arg1.getValueDouble("dLatMax2"),arg1.getValueDouble("dLonMin2"),arg1.getValueDouble("dLonMax2"));
		
		//initializing diversity estimator
		//div1 = new DiversityEstimator_AlphaDiversity_LocalRichness(arg1,bds1,smr1);
		div1 = new DiversityEstimator_AlphaDiversity_TotalRichness(arg1,bds1,smr1,3);
		//div1 = new DiversityEstimator_BetaDiversity(arg1,bds1,bds1,smr1);
		
		//initializing output
		lstOut = new ArrayList<String>();
		//lstOut.add("ESTIMATE_1,ESTIMATE_2,ESTIMATE_2_CENTRAL,ESTIMATE_3,ESTIMATE_4,ESTIMATE_5,OBSERVED_SPECIES_TOTAL,ACTUAL_SPECIES_TOTAL");
		//lstOut.add("ESTIMATE_TEST,ESTIMATE_1,ESTIMATE_2,ESTIMATE_3,ESTIMATE_4,ESTIMATE_5,OBSERVED_SPECIES_TOTAL,ACTUAL_SPECIES_TOTAL");
		//lstOut.add("ESTIMATE_TEST,ESTIMATE_1,ESTIMATE_2,ESTIMATE_3,ESTIMATE_4,ESTIMATE_5,ESTIMATE_6,ESTIMATE_7,OBSERVED_SPECIES_TOTAL,ACTUAL_SPECIES_TOTAL");
		lstOut.add("ESTIMATE_1,ESTIMATE_2,ESTIMATE_3,OBSERVED_SPECIES_TOTAL,ACTUAL_SPECIES_TOTAL");
		
		//loading tolerance
		dTolerance = 0.000000000001;
		
		//looping through sets of community samples
		for(int i=0;i<arg1.getValueInt("iValidationIterations");i++){

			//updating progress
			System.out.println("Analyzing community " + (i+1) + " of " + arg1.getValueInt("iValidationIterations") + "...");
			
			//censusing communities
			div1.censusRandomCommunities(7*i+991);
			
			//loading random ranges
			div1.chooseRandomRanges(11*i+991);
			
			//outputting results
			//lstOut.add(div1.findEstimate(1, dTolerance, false) + "," + div1.findEstimate(2, dTolerance, false) + "," + div1.findEstimate(2, dTolerance, true) + "," + div1.findEstimate(3, dTolerance,false) + "," + div1.findEstimate(4, dTolerance, false) + "," + div1.findEstimate(5, dTolerance, false) + "," + div1.findTotalObservedNumberSpecies() + "," + div1.dTotalSpecies);
			//lstOut.add(div1.findEstimate(4.5, dTolerance, false) + "," + div1.findEstimate(1, dTolerance, false) + "," + div1.findEstimate(2, dTolerance, false) + "," + div1.findEstimate(3, dTolerance,false) + "," + div1.findEstimate(4, dTolerance,false) + "," + div1.findEstimate(5, dTolerance,false) + "," + div1.findEstimate(6, dTolerance,false) + "," + div1.findEstimate(7, dTolerance,false) + "," + div1.findTotalObservedNumberSpecies() + "," + div1.dTotalSpecies);
			lstOut.add(div1.findEstimate(1, dTolerance) + "," + div1.findEstimate(2, dTolerance) + "," + div1.findEstimate(3, dTolerance) + "," + div1.dTotalObservedDiversity + "," + div1.lstAllSpecies.size());
		}
		
		//printing results
		FileIO.writeFile(lstOut, "/home/jladau/DiversityEstimator_Output.csv", 0, false);
		
		//terminating
		System.out.println("Done.");
		
	}
}
